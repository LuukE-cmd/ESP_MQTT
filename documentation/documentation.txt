Opdracht MQTT Weerstation

Auteur: Luuk Elkink
Studentnummer: 1642820

Inleiding

Dit document beschrijft de code voor een ESP32 microcontroller die sensordata verzamelt en verstuurt via MQTT. De code omvat functionaliteit voor:

-   Communicatie met een I2C-sensor
-   Wifi-verbinding
-   MQTT-verbinding
-   Windsnelheidsmeting met interrupt

Gebruikte hardware:

-   ESP32 microcontroller
-   I2C-sensor (type specificeren in de code)
-   Windsensor (magneet relais, filtering etc.)

Software:

ESP-IDF framework
PlatformIO IDE

-- Functionaliteit in detail --

Als extra deel van de opdracht is gekozen niet het aduino framework te gebruiken maar het ESP-IDF framework.
Deze geeft meer controle over de hardware en geheugen van de esp met de tradeoff dat de code iets complexer wordt.
Verder is uitbundig onderzocht naar hoe interrupt routines werken, en zijn deze gebruikt op een non-blocking manier, waar de wifi, mqtt en i2c code blijven functioneren
zelfs wanneer de interrupts gemaakt worden.

De delen van de code en de schakeling worden in het volgende deel beknopt uitgewerkt. Een nog uitgebreidere uitleg met afbeeldingen is te vinden in de bijgeleverde .pdf.
Deze .pdf is gemaakt omdat ik origineel niet wist dat de documentatie in een .txt bestand moest, maar is veel duidelijker door de afbeeldingen. 
Alle gebruikte bibliotheken zijn van espressif zelf, dus zijn niet opgenomen in een los dependancies document.

1. I2C-sensorcommunicatie

De I2C-sensorcommunicatie verloopt in de volgende stappen:

*   Initialisatie I2C-bus: De code initialiseert de I2C-bus met behulp van de i2c_master_init()-functie uit de i2c_master.h-bibliotheek. 
    Hierbij worden de instellingen voor de bus gedefinieerd, zoals de SDA- en SCL-pins, het poortnummer en de pullup-weerstand.

*   Aanmaken I2C-device: De i2c_master_bus_add_device()-functie wordt gebruikt om een I2C-device toe te voegen aan de bus. 
    De instellingen voor het device worden opgeslagen in een struct van het type i2c_device_config_t, met informatie zoals het adres, 
    de adreslengte en de verbindingssnelheid (deze waardes komen uit de datasheet van de sensor).

*   Lezen sensordata: De read_sensor_data()-functie leest de sensordata. Deze functie ontvangt een pointer naar een i2c_device-struct 
    (de eerder gemaakte struct met bus- en device-informatie) en retourneert de gemeten waardes. De functie stuurt een commando naar de sensor om de meting te starten, 
    wacht kort op de respons, en leest vervolgens de data uit de sensor.
*   Verwerken sensordata: De gemeten data wordt geconverteerd naar bruikbare waardes 
    (temperatuur in °C, luchtvochtigheid in %). De berekende waardes worden opgeslagen in variabelen.

2. Windsnelheidsmeting met interrupt

De windsnelheidsmeting met interrupt werkt als volgt:

*   Interrupt configureren: De interrupt wordt geconfigureerd voor GPIO-pin 25 met behulp van de gpio_isr_handler_add()-functie. 
    Deze functie koppelt de gpio_isr_handler()-functie aan de interrupt en definieert de interrupt-trigger 
    (in dit geval GPIO_INTR_POSEDGE, wat betekent dat de interrupt geactiveerd wordt bij een stijgende flank op de pin).

*   Interrupt handler: De gpio_isr_handler()-functie wordt aangeroepen wanneer de interrupt wordt geactiveerd. 
    Deze functie incrementeert een teller die het aantal interrupts registreert.

*   Berekenen windsnelheid: De windsnelheid wordt berekend door de teller te delen door de tijd die is verstreken sinds de laatste interrupt. 
    De tijd wordt gemeten met behulp van de esp_timer-bibliotheek. De tijden worden opgeslagen in een array waar de oudste waarde wordt vervangen met de meting. 
    Het gemiddelde van de waarden wordt gebruikt om de snelheid te berekenen. Deze formule is niet perfect omdat deze afhankelijk is van de weerstand en grootte van de fysieke windmeter

*   Meting plaatsen in geheugen: De berekende snelheid word opgeslagen in de sensor meting struct. wanneer niet meer gemeten wordt wordt deze gereset naar 0.
    Dit om te voorkomen dat als de windmeter spontaan stopt, de laatste meting herhaald wordt.

3. Wifi-verbinding

De Wifi-verbinding wordt gemaakt met behulp van de volgende stappen:

*   Flashgeheugen: Wifi-gegevens worden permanent opgeslagen in het flashgeheugen (indien nodig).

*   Initialisatie: wifi_init_sta() start Wifi met standaardinstellingen en het gedefinieerde SSID/wachtwoord.

*   Event handler: Een handler wordt gecreëerd om te reageren op Wifi-events (verbinding gemaakt/verbroken etc.).

4. MQTT-verbinding

*   Initialisatie: De eigenschappen van de MQTT verbinding worden gedefinieerd. Met deze eigenschappen wordt een instantie van de MQTT client gestart (uit mqtt_client.h)

*   Event handler: Een MQTT-event handler wordt gecreëerd om te reageren op MQTT-events (verbinding, data-ontvangst etc.).

*   Foutenafhandeling: De handler behandelt fouten en print debug-informatie.

5. MQTT data verstuur routine

In main wordt de data verstuur taak toegevoegd aan RTOS met xTaskCreate(&publish_sensor_data, "publish_sensor_data", 4096, NULL, 5, NULL);

Deze definieert welke functie wordt toegevoegd, hoe deze heet (voor debug), hoeveel geheugen deze mag hebben (ik heb ruim genomen, dit kan veel minder), 
mogelijke ingangsdata (niet nodig dus NULL), prioriteit (niet heel hoog, dus 5) en een task handle (niet nodig, wordt gebruikt als je later de taak wil bewerken, verwijderen etc.)

Publish_sensor_data() bevat een while(1) loop (aka eindeloos). Maar omdat dit in een taak wordt aangeroepen zal RTOS deze beheren, 
waardoor deze loopt afhankelijk van prioriteit etc.

De publish_sensor_data() functie leest als eerste de sensor data van de i2c sensor. Vervolgens worden alle sensormetingen omgezet naar strings 
zodat deze via mqtt verstuurd kunnen worden.

6. Schakeling wind sensor

De schakeling bestaat uit een magneet relais (normaal open) dat schakelt wanneer een magnetisch veld aanwezig is. 
Het relais was oorspronkelijk alleen verbonden met een pullup-weerstand, waardoor de spanning werd gemeten wanneer er 
kortsluiting was naar aarde en de pin dus van hoog naar laag ging.

Dit introduceerde een probleem: de meting is zo snel dat bij elke schakeling meerdere keren een signaal wordt gemeten. 
Dit komt doordat de schakelaar bij het sluiten niet perfect contact maakt en een paar keer trilt. 
Hierdoor ontstaat op het moment van schakelen een kort hoogfrequent signaal.

Om dit te voorkomen is een low-pass filter toegepast. Deze filtert het hoogfrequente signaal uit de schakeling. 
Hierdoor worden de trillingen gelijkgetrokken, maar de gemiddelde spanning op deze momenten zal dalen.

Dit maakt een nieuw probleem duidelijk: het signaal bevindt zich nu een deel van de tijd in een niet gedefinieerd gebied. 
De pins van de ESP32 meten "hoog" vanaf ~80% van VCC en "laag" vanaf ~20% VCC. Het gebied hiertussen; 20% tot 80%, is niet gedefinieerd en resulteert in onverwachte resultaten, 
vooral als het signaal bijvoorbeeld net onder en net boven de 80% trilt.

Hierdoor is de filter niet genoeg om het probleem van extra metingen op te lossen. De volgende stap is het toepassen van een SCHMITT trigger IC. 
Dit is een NOT-gate die het signaal versterkt naar een van de uiteinden van het meetgebied.

Er is een hoge grens "Vr+" en een lage grens "Vr-". Als een signaal boven de hoge grens komt, wordt de uitvoer gelijk aan VCC. 
Deze wordt pas nul wanneer het ingangssignaal onder de lage grens komt. Zo is elk gebied tussen nul en VCC gedefinieerd en kan het 
gefilterde signaal correct worden gelezen door de ESP32.

7. Overige opmerkingen

*   De code is voorzien van uitgebreide commentaren in het Engels.

*   De code is nu niet ideaal door tijd en scope limieten. Geheugengebruik en structuur kunnen worden verbeterd in een eindproduct. 
    Vooral het feit dat alle functies in een bestand zitten, Deze zouden voor leesbaaheid opgesplitst kunnen worden in losse delen voor WIFI, MQTT, I2C etc.
    
Bewijs van functionaliteit

De functionaliteit van de code is getest door de debug-uitvoer te bekijken en de MQTT-data te controleren in een MQTT-explorer.

Conclusie

De code is met succes geïmplementeerd en functioneert zoals verwacht. De code verzamelt sensordata, verstuurt deze via MQTT en toont de data in de MQTT-explorer.

Opmerkingen:

In deze tekstversie zijn de figuren uit de originele documentatie vervangen door beschrijvingen.
De code is niet opgenomen in deze tekstversie.
Raadpleeg de originele documentatie met figuren voor meer details over de code en de functionaliteit.